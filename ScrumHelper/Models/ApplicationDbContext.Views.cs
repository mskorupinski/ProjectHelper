//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(ScrumHelper.Models.ApplicationDbContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets7c5cc2617dc69045e6a657940d77c71706827df264bc5ff107d41e684bcfa871))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets7c5cc2617dc69045e6a657940d77c71706827df264bc5ff107d41e684bcfa871 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "7c5cc2617dc69045e6a657940d77c71706827df264bc5ff107d41e684bcfa871"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.Project")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.User")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.ApplicationUser")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.IdentityUserClaim")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.IdentityUserLogin")
            {
                return GetView4();
            }

            if (extentName == "CodeFirstDatabase.IdentityUserRole")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.ProjectUser")
            {
                return GetView6();
            }

            if (extentName == "CodeFirstDatabase.IdentityRole")
            {
                return GetView7();
            }

            if (extentName == "CodeFirstDatabase.Sprint")
            {
                return GetView8();
            }

            if (extentName == "CodeFirstDatabase.SprintTask")
            {
                return GetView9();
            }

            if (extentName == "CodeFirstDatabase.TaskUser")
            {
                return GetView10();
            }

            if (extentName == "ApplicationDbContext.Projects")
            {
                return GetView11();
            }

            if (extentName == "ApplicationDbContext.Users")
            {
                return GetView12();
            }

            if (extentName == "ApplicationDbContext.Project_UsersInProjects")
            {
                return GetView13();
            }

            if (extentName == "ApplicationDbContext.SprintTask_UsersInTask")
            {
                return GetView14();
            }

            if (extentName == "ApplicationDbContext.Users1")
            {
                return GetView15();
            }

            if (extentName == "ApplicationDbContext.IdentityUserClaims")
            {
                return GetView16();
            }

            if (extentName == "ApplicationDbContext.IdentityUserLogins")
            {
                return GetView17();
            }

            if (extentName == "ApplicationDbContext.IdentityUserRoles")
            {
                return GetView18();
            }

            if (extentName == "ApplicationDbContext.ProjectUsers")
            {
                return GetView19();
            }

            if (extentName == "ApplicationDbContext.Roles")
            {
                return GetView20();
            }

            if (extentName == "ApplicationDbContext.Sprints")
            {
                return GetView21();
            }

            if (extentName == "ApplicationDbContext.SprintTasks")
            {
                return GetView22();
            }

            if (extentName == "ApplicationDbContext.TaskUsers")
            {
                return GetView23();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Project.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Project
        [CodeFirstDatabaseSchema.Project](T1.Project_ID, T1.Project_Name, T1.Project_Notes, T1.Project_DataAdded)
    FROM (
        SELECT 
            T.ID AS Project_ID, 
            T.Name AS Project_Name, 
            T.Notes AS Project_Notes, 
            T.DataAdded AS Project_DataAdded, 
            True AS _from0
        FROM ApplicationDbContext.Projects AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.User.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing User
        [CodeFirstDatabaseSchema.User](T4.User_Id, T4.User_ApplicationUserId, T4.User_Name, T4.User_Lastname, T4.User_Mail, T4.[User.Project_ID], T4.[User.SprintTask_Id])
    FROM (
        SELECT T1.User_Id, T1.User_ApplicationUserId, T1.User_Name, T1.User_Lastname, T1.User_Mail, T2.[User.Project_ID], T3.[User.SprintTask_Id], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, (T3._from2 AND T3._from2 IS NOT NULL) AS _from2
        FROM  (
            SELECT 
                T.Id AS User_Id, 
                T.ApplicationUserId AS User_ApplicationUserId, 
                T.Name AS User_Name, 
                T.Lastname AS User_Lastname, 
                T.Mail AS User_Mail, 
                True AS _from0
            FROM ApplicationDbContext.Users AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Project_UsersInProjects_Target).Id AS User_Id, 
                Key(T.Project_UsersInProjects_Source).ID AS [User.Project_ID], 
                True AS _from1
            FROM ApplicationDbContext.Project_UsersInProjects AS T) AS T2
            ON T1.User_Id = T2.User_Id
            LEFT OUTER JOIN (
            SELECT 
                Key(T.SprintTask_UsersInTask_Target).Id AS User_Id, 
                Key(T.SprintTask_UsersInTask_Source).Id AS [User.SprintTask_Id], 
                True AS _from2
            FROM ApplicationDbContext.SprintTask_UsersInTask AS T) AS T3
            ON T1.User_Id = T3.User_Id
    ) AS T4");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ApplicationUser.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApplicationUser
        [CodeFirstDatabaseSchema.ApplicationUser](T1.ApplicationUser_Id, T1.ApplicationUser_Email, T1.ApplicationUser_EmailConfirmed, T1.ApplicationUser_PasswordHash, T1.ApplicationUser_SecurityStamp, T1.ApplicationUser_PhoneNumber, T1.ApplicationUser_PhoneNumberConfirmed, T1.ApplicationUser_TwoFactorEnabled, T1.ApplicationUser_LockoutEndDateUtc, T1.ApplicationUser_LockoutEnabled, T1.ApplicationUser_AccessFailedCount, T1.ApplicationUser_UserName)
    FROM (
        SELECT 
            T.Id AS ApplicationUser_Id, 
            T.Email AS ApplicationUser_Email, 
            T.EmailConfirmed AS ApplicationUser_EmailConfirmed, 
            T.PasswordHash AS ApplicationUser_PasswordHash, 
            T.SecurityStamp AS ApplicationUser_SecurityStamp, 
            T.PhoneNumber AS ApplicationUser_PhoneNumber, 
            T.PhoneNumberConfirmed AS ApplicationUser_PhoneNumberConfirmed, 
            T.TwoFactorEnabled AS ApplicationUser_TwoFactorEnabled, 
            T.LockoutEndDateUtc AS ApplicationUser_LockoutEndDateUtc, 
            T.LockoutEnabled AS ApplicationUser_LockoutEnabled, 
            T.AccessFailedCount AS ApplicationUser_AccessFailedCount, 
            T.UserName AS ApplicationUser_UserName, 
            True AS _from0
        FROM ApplicationDbContext.Users1 AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityUserClaim.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserClaim
        [CodeFirstDatabaseSchema.IdentityUserClaim](T1.IdentityUserClaim_Id, T1.IdentityUserClaim_UserId, T1.IdentityUserClaim_ClaimType, T1.IdentityUserClaim_ClaimValue)
    FROM (
        SELECT 
            T.Id AS IdentityUserClaim_Id, 
            T.UserId AS IdentityUserClaim_UserId, 
            T.ClaimType AS IdentityUserClaim_ClaimType, 
            T.ClaimValue AS IdentityUserClaim_ClaimValue, 
            True AS _from0
        FROM ApplicationDbContext.IdentityUserClaims AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityUserLogin.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserLogin
        [CodeFirstDatabaseSchema.IdentityUserLogin](T1.IdentityUserLogin_LoginProvider, T1.IdentityUserLogin_ProviderKey, T1.IdentityUserLogin_UserId)
    FROM (
        SELECT 
            T.LoginProvider AS IdentityUserLogin_LoginProvider, 
            T.ProviderKey AS IdentityUserLogin_ProviderKey, 
            T.UserId AS IdentityUserLogin_UserId, 
            True AS _from0
        FROM ApplicationDbContext.IdentityUserLogins AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityUserRole.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserRole
        [CodeFirstDatabaseSchema.IdentityUserRole](T1.IdentityUserRole_UserId, T1.IdentityUserRole_RoleId)
    FROM (
        SELECT 
            T.UserId AS IdentityUserRole_UserId, 
            T.RoleId AS IdentityUserRole_RoleId, 
            True AS _from0
        FROM ApplicationDbContext.IdentityUserRoles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ProjectUser.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProjectUser
        [CodeFirstDatabaseSchema.ProjectUser](T1.ProjectUser_Id, T1.ProjectUser_ProjectId, T1.ProjectUser_UserId)
    FROM (
        SELECT 
            T.Id AS ProjectUser_Id, 
            T.ProjectId AS ProjectUser_ProjectId, 
            T.UserId AS ProjectUser_UserId, 
            True AS _from0
        FROM ApplicationDbContext.ProjectUsers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityRole.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityRole
        [CodeFirstDatabaseSchema.IdentityRole](T1.IdentityRole_Id, T1.IdentityRole_Name)
    FROM (
        SELECT 
            T.Id AS IdentityRole_Id, 
            T.Name AS IdentityRole_Name, 
            True AS _from0
        FROM ApplicationDbContext.Roles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Sprint.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Sprint
        [CodeFirstDatabaseSchema.Sprint](T1.Sprint_Id, T1.Sprint_SprintNumber, T1.Sprint_Duration, T1.Sprint_DateAdded, T1.Sprint_ProjectId, T1.Sprint_EndDate)
    FROM (
        SELECT 
            T.Id AS Sprint_Id, 
            T.SprintNumber AS Sprint_SprintNumber, 
            T.Duration AS Sprint_Duration, 
            T.DateAdded AS Sprint_DateAdded, 
            T.ProjectId AS Sprint_ProjectId, 
            T.EndDate AS Sprint_EndDate, 
            True AS _from0
        FROM ApplicationDbContext.Sprints AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.SprintTask.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SprintTask
        [CodeFirstDatabaseSchema.SprintTask](T1.SprintTask_Id, T1.SprintTask_Name, T1.SprintTask_Note, T1.SprintTask_DataAdded, T1.SprintTask_Status, T1.SprintTask_SprintId, T1.SprintTask_UserId)
    FROM (
        SELECT 
            T.Id AS SprintTask_Id, 
            T.Name AS SprintTask_Name, 
            T.Note AS SprintTask_Note, 
            T.DataAdded AS SprintTask_DataAdded, 
            CAST(T.Status AS [Edm.Int32]) AS SprintTask_Status, 
            T.SprintId AS SprintTask_SprintId, 
            T.UserId AS SprintTask_UserId, 
            True AS _from0
        FROM ApplicationDbContext.SprintTasks AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TaskUser.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TaskUser
        [CodeFirstDatabaseSchema.TaskUser](T1.TaskUser_Id, T1.TaskUser_SprintTaskID, T1.TaskUser_UserID)
    FROM (
        SELECT 
            T.Id AS TaskUser_Id, 
            T.SprintTaskID AS TaskUser_SprintTaskID, 
            T.UserID AS TaskUser_UserID, 
            True AS _from0
        FROM ApplicationDbContext.TaskUsers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Projects.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Projects
        [ScrumHelper.Models.Project](T1.Project_ID, T1.Project_Name, T1.Project_Notes, T1.Project_DataAdded)
    FROM (
        SELECT 
            T.ID AS Project_ID, 
            T.Name AS Project_Name, 
            T.Notes AS Project_Notes, 
            T.DataAdded AS Project_DataAdded, 
            True AS _from0
        FROM CodeFirstDatabase.Project AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Users
        [ScrumHelper.Models.User](T1.User_Id, T1.User_ApplicationUserId, T1.User_Name, T1.User_Lastname, T1.User_Mail) WITH 
        RELATIONSHIP(CREATEREF(ApplicationDbContext.Projects, ROW(T1.[Project_UsersInProjects.Project_UsersInProjects_Source.ID]),[ScrumHelper.Models.Project]),[ScrumHelper.Models.Project_UsersInProjects],Project_UsersInProjects_Target,Project_UsersInProjects_Source) 
        RELATIONSHIP(CREATEREF(ApplicationDbContext.SprintTasks, ROW(T1.[SprintTask_UsersInTask.SprintTask_UsersInTask_Source.Id]),[ScrumHelper.Models.SprintTask]),[ScrumHelper.Models.SprintTask_UsersInTask],SprintTask_UsersInTask_Target,SprintTask_UsersInTask_Source) 
    FROM (
        SELECT 
            T.Id AS User_Id, 
            T.ApplicationUserId AS User_ApplicationUserId, 
            T.Name AS User_Name, 
            T.Lastname AS User_Lastname, 
            T.Mail AS User_Mail, 
            True AS _from0, 
            T.Project_ID AS [Project_UsersInProjects.Project_UsersInProjects_Source.ID], 
            T.SprintTask_Id AS [SprintTask_UsersInTask.SprintTask_UsersInTask_Source.Id]
        FROM CodeFirstDatabase.User AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Project_UsersInProjects.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Project_UsersInProjects
        [ScrumHelper.Models.Project_UsersInProjects](T3.[Project_UsersInProjects.Project_UsersInProjects_Source], T3.[Project_UsersInProjects.Project_UsersInProjects_Target])
    FROM (
        SELECT -- Constructing Project_UsersInProjects_Source
            CreateRef(ApplicationDbContext.Projects, row(T2.[Project_UsersInProjects.Project_UsersInProjects_Source.ID]), [ScrumHelper.Models.Project]) AS [Project_UsersInProjects.Project_UsersInProjects_Source], 
            T2.[Project_UsersInProjects.Project_UsersInProjects_Target]
        FROM (
            SELECT -- Constructing Project_UsersInProjects_Target
                T1.[Project_UsersInProjects.Project_UsersInProjects_Source.ID], 
                CreateRef(ApplicationDbContext.Users, row(T1.[Project_UsersInProjects.Project_UsersInProjects_Target.Id]), [ScrumHelper.Models.User]) AS [Project_UsersInProjects.Project_UsersInProjects_Target]
            FROM (
                SELECT 
                    T.Project_ID AS [Project_UsersInProjects.Project_UsersInProjects_Source.ID], 
                    T.Id AS [Project_UsersInProjects.Project_UsersInProjects_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.User AS T
                WHERE T.Project_ID IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.SprintTask_UsersInTask.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SprintTask_UsersInTask
        [ScrumHelper.Models.SprintTask_UsersInTask](T3.[SprintTask_UsersInTask.SprintTask_UsersInTask_Source], T3.[SprintTask_UsersInTask.SprintTask_UsersInTask_Target])
    FROM (
        SELECT -- Constructing SprintTask_UsersInTask_Source
            CreateRef(ApplicationDbContext.SprintTasks, row(T2.[SprintTask_UsersInTask.SprintTask_UsersInTask_Source.Id]), [ScrumHelper.Models.SprintTask]) AS [SprintTask_UsersInTask.SprintTask_UsersInTask_Source], 
            T2.[SprintTask_UsersInTask.SprintTask_UsersInTask_Target]
        FROM (
            SELECT -- Constructing SprintTask_UsersInTask_Target
                T1.[SprintTask_UsersInTask.SprintTask_UsersInTask_Source.Id], 
                CreateRef(ApplicationDbContext.Users, row(T1.[SprintTask_UsersInTask.SprintTask_UsersInTask_Target.Id]), [ScrumHelper.Models.User]) AS [SprintTask_UsersInTask.SprintTask_UsersInTask_Target]
            FROM (
                SELECT 
                    T.SprintTask_Id AS [SprintTask_UsersInTask.SprintTask_UsersInTask_Source.Id], 
                    T.Id AS [SprintTask_UsersInTask.SprintTask_UsersInTask_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.User AS T
                WHERE T.SprintTask_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Users1.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Users1
        [ScrumHelper.Models.ApplicationUser](T1.ApplicationUser_Id, T1.ApplicationUser_Email, T1.ApplicationUser_EmailConfirmed, T1.ApplicationUser_PasswordHash, T1.ApplicationUser_SecurityStamp, T1.ApplicationUser_PhoneNumber, T1.ApplicationUser_PhoneNumberConfirmed, T1.ApplicationUser_TwoFactorEnabled, T1.ApplicationUser_LockoutEndDateUtc, T1.ApplicationUser_LockoutEnabled, T1.ApplicationUser_AccessFailedCount, T1.ApplicationUser_UserName)
    FROM (
        SELECT 
            T.Id AS ApplicationUser_Id, 
            T.Email AS ApplicationUser_Email, 
            T.EmailConfirmed AS ApplicationUser_EmailConfirmed, 
            T.PasswordHash AS ApplicationUser_PasswordHash, 
            T.SecurityStamp AS ApplicationUser_SecurityStamp, 
            T.PhoneNumber AS ApplicationUser_PhoneNumber, 
            T.PhoneNumberConfirmed AS ApplicationUser_PhoneNumberConfirmed, 
            T.TwoFactorEnabled AS ApplicationUser_TwoFactorEnabled, 
            T.LockoutEndDateUtc AS ApplicationUser_LockoutEndDateUtc, 
            T.LockoutEnabled AS ApplicationUser_LockoutEnabled, 
            T.AccessFailedCount AS ApplicationUser_AccessFailedCount, 
            T.UserName AS ApplicationUser_UserName, 
            True AS _from0
        FROM CodeFirstDatabase.ApplicationUser AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.IdentityUserClaims.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserClaims
        [ScrumHelper.Models.IdentityUserClaim](T1.IdentityUserClaim_Id, T1.IdentityUserClaim_UserId, T1.IdentityUserClaim_ClaimType, T1.IdentityUserClaim_ClaimValue)
    FROM (
        SELECT 
            T.Id AS IdentityUserClaim_Id, 
            T.UserId AS IdentityUserClaim_UserId, 
            T.ClaimType AS IdentityUserClaim_ClaimType, 
            T.ClaimValue AS IdentityUserClaim_ClaimValue, 
            True AS _from0
        FROM CodeFirstDatabase.IdentityUserClaim AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.IdentityUserLogins.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserLogins
        [ScrumHelper.Models.IdentityUserLogin](T1.IdentityUserLogin_LoginProvider, T1.IdentityUserLogin_ProviderKey, T1.IdentityUserLogin_UserId)
    FROM (
        SELECT 
            T.LoginProvider AS IdentityUserLogin_LoginProvider, 
            T.ProviderKey AS IdentityUserLogin_ProviderKey, 
            T.UserId AS IdentityUserLogin_UserId, 
            True AS _from0
        FROM CodeFirstDatabase.IdentityUserLogin AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.IdentityUserRoles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserRoles
        [ScrumHelper.Models.IdentityUserRole](T1.IdentityUserRole_UserId, T1.IdentityUserRole_RoleId)
    FROM (
        SELECT 
            T.UserId AS IdentityUserRole_UserId, 
            T.RoleId AS IdentityUserRole_RoleId, 
            True AS _from0
        FROM CodeFirstDatabase.IdentityUserRole AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.ProjectUsers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProjectUsers
        [ScrumHelper.Models.ProjectUser](T1.ProjectUser_Id, T1.ProjectUser_ProjectId, T1.ProjectUser_UserId)
    FROM (
        SELECT 
            T.Id AS ProjectUser_Id, 
            T.ProjectId AS ProjectUser_ProjectId, 
            T.UserId AS ProjectUser_UserId, 
            True AS _from0
        FROM CodeFirstDatabase.ProjectUser AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Roles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Roles
        [ScrumHelper.Models.IdentityRole](T1.IdentityRole_Id, T1.IdentityRole_Name)
    FROM (
        SELECT 
            T.Id AS IdentityRole_Id, 
            T.Name AS IdentityRole_Name, 
            True AS _from0
        FROM CodeFirstDatabase.IdentityRole AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Sprints.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Sprints
        [ScrumHelper.Models.Sprint](T1.Sprint_Id, T1.Sprint_SprintNumber, T1.Sprint_Duration, T1.Sprint_DateAdded, T1.Sprint_ProjectId, T1.Sprint_EndDate)
    FROM (
        SELECT 
            T.Id AS Sprint_Id, 
            T.SprintNumber AS Sprint_SprintNumber, 
            T.Duration AS Sprint_Duration, 
            T.DateAdded AS Sprint_DateAdded, 
            T.ProjectId AS Sprint_ProjectId, 
            T.EndDate AS Sprint_EndDate, 
            True AS _from0
        FROM CodeFirstDatabase.Sprint AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.SprintTasks.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SprintTasks
        [ScrumHelper.Models.SprintTask](T1.SprintTask_Id, T1.SprintTask_Name, T1.SprintTask_Note, T1.SprintTask_DataAdded, T1.SprintTask_Status, T1.SprintTask_SprintId, T1.SprintTask_UserId)
    FROM (
        SELECT 
            T.Id AS SprintTask_Id, 
            T.Name AS SprintTask_Name, 
            T.Note AS SprintTask_Note, 
            T.DataAdded AS SprintTask_DataAdded, 
            CAST(T.Status AS [ScrumHelper.Models.Status]) AS SprintTask_Status, 
            T.SprintId AS SprintTask_SprintId, 
            T.UserId AS SprintTask_UserId, 
            True AS _from0
        FROM CodeFirstDatabase.SprintTask AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.TaskUsers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TaskUsers
        [ScrumHelper.Models.TaskUser](T1.TaskUser_Id, T1.TaskUser_SprintTaskID, T1.TaskUser_UserID)
    FROM (
        SELECT 
            T.Id AS TaskUser_Id, 
            T.SprintTaskID AS TaskUser_SprintTaskID, 
            T.UserID AS TaskUser_UserID, 
            True AS _from0
        FROM CodeFirstDatabase.TaskUser AS T
    ) AS T1");
        }
    }
}
